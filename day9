#PF-Assgn-57
def check_prime(number):
    return number>1 and all(number % i != 0 for i in range(2, number))
                #remove pass and write your logic here. if the number is prime return true, else return false

def rotations(num):
    f=[num]
    s=str(num)
    digit = len(s) 
    powTen = pow(10, digit - 1) 
    for i in range(digit - 1): 
        firstDigit = num // powTen 
        left = (num * 10 + firstDigit - 
               (firstDigit * powTen * 10)) 
        f.append(left)
        num = left
    return f
 #remove pass and write your logic here. It should return the list of different combinations of digits of the given number.
	#Rotation should be done in clockwise direction. For example, if the given number is 197, the list returned should be [197, 971, 719]

def get_circular_prime_count(limit):
    c=0
    for i in range(1,limit):
            if all (check_prime(i) for i in rotations(i)):
                c+=1 
    return c#remove pass and write your logic here.It should return the count of circular prime numbers below the given limit.

#Provide different values for limit and test your program
print(get_circular_prime_count(1000))


#PF-Assgn-59
def check_perfect_number(number):
    t=number
    s=0
    for i in range(1,t):
        if (t%i)==0:
            s+=i
    if s==t:
        return True 
    else:
        return False#start writing your code here

def check_perfectno_from_list(no_list):
    l=[]
    for i in range(0,len(no_list)):
        if no_list[i]!=0 and check_perfect_number(no_list[i])==True:
            l.append(no_list[i])
        else:
            continue
    return l#start writing your code here

perfectno_list=check_perfectno_from_list([18,6,4,2,1,28,0])
print(perfectno_list)


#PF-Assgn-60
from collections import OrderedDict
def remove_duplicates(value):
    #start writing your code here
    return "".join(OrderedDict.fromkeys(value))
print(remove_duplicates("11223445566666ababzzz@@@123#*#*"))




#PF-Assgn-61 incorrect
def validate_name(name):
    if len(name)<=15 and name.isalpha() and not name==" ":
        return True 
    else:
        return False#Start writing your code here

def validate_phone_no(phno):
    if len(phno)==10 and phno.isdigit() and not phno=="9999999999":
        return True 
    else:
        return False#Start writing your code here

def validate_email_id(email_id):
    #Start writing your code here
    c=0
    for i in range(0,len(email_id)):
        if email_id[i]=="@" or email_id[i]=="." or email_id[i]=="c" or email_id[i]=="o" or email_id[i]=="@"
    if "@gmail.com" or "@yahoo.com" or "@hotmail.com" in email_id and c==1:
        return True 
    else:
        return False

def validate_all(name,phone_no,email_id):
    if(validate_name(name)==False):
        print("Invalid Name")
    if(validate_phone_no(phone_no)==False):
        print("Invalid phone number")
    if (validate_email_id(email_id)==False):
        print("Invalid email id")
    if(validate_name(name)==True and validate_phone_no(phone_no)==True and validate_email_id(email_id)==True):
            print("All the details are valid")#Start writing your code here
    # Use the below given print statements to display appropriate messages
    # Also, do not modify them for verification to work
    #print("Invalid Name")
    #print("Invalid phone number")
    #print("Invalid email id")
    #print("All the details are valid")


#Provide different values for name, phone_no and email_id and test your program
validate_all("Tina", "9994599998", "tina@yahoo.com")




#PF-Prac-1
def add_string(str1):
  if(len(str1)>=3):
      if str1[-3:]=="ing":
        d=str1.replace("str1[-3:]","ly")
      else:
        d=str1+"ing"#start writing your code here
      
  
  return d

str1="helping"
print(add_string(str1))
