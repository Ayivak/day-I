#PF-Prac-3
def create_new_dictionary(prices):
    #start writing your code here
    n={}
    for i in prices:
        if(prices[i]>200):
            n.setdefault(i,prices[i])
    return n

prices = { 'ACME': 45.23,'AAPL': 612.78,'IBM': 205.55,'HPQ': 37.20,'FB': 10.75}
print(create_new_dictionary(prices))



#PF-Prac-1
def add_string(str1):
  if(len(str1)>2):
      if str1[-3:]=="ing":
        d=str1+"ly"
      else:
        d=str1+"ing"
  return d

str1="helping"
print(add_string(str1))



#PF-Prac-2
def bracket_pattern(input_str):
    c=0
    d=0
    if input_str[0]!=')':
        for i in range(0,len(input_str)):
            if(input_str[i]=="("):
                c+=1 
            else:
                d+=1 
        if c==d:
            return True 
        else:
            return False 
    else:
        return False
        
input_str="(())()"
print(bracket_pattern(input_str))




#PF-Prac-4
def find_nine(nums):
    #Remove pass and write your code here
    for i in range(0,len(nums)):
        if nums[i]==9 and i<4:
            return True
    return False
nums=[1,4,5,6]
print(find_nine(nums))




#PF-Prac-5
def count_digits_letters(sentence):
    result_list=[]
    c=0 
    d=0
    for i in sentence:
        if i.isalpha():
            c+=1
        if i.isdigit():
            d+=1
    result_list.append(c)
    result_list.append(d)
    return result_list

sentence="ABCEFG"
print(count_digits_letters(sentence))



#PF-Prac-6
def list123(nums):
    l=[1,2,3]
    if str(l)[1:-1] in str(nums):
        return True 
    else:
        return False
nums=[1,2,4,5]
print(list123(nums))


#PF-Prac-7
def seed_no(number,ref_no):
    p=number
    l=number
    while(l>0):
        r=l%10
        p*=r
        l=l//10
    if p==ref_no:
        return True 
    else:
        return False
     
        #start writing your code here
    
number=45
ref_no=1000
print(seed_no(number,ref_no))



#PF-Prac-8
def calculate_net_amount(trans_list):
    s=0 
    r=0
    net_amount=0
    for i in trans_list:
        a=[]
        a=i.split(":")
        if a[0]=="D":
            s+=int(a[1])
        if a[0]=="W":
            r+=int(a[1])
    net_amount=s-r
    return net_amount
       

trans_list=["D:350","W:100","W:500","D:1000"]
print(calculate_net_amount(trans_list))




#PF-Prac-9
def generate_dict(number):
    d={}
    for i in range(1,number+1):
        d[i]=i*i
    return d
number=20
print(generate_dict(number))



#PF-Prac-10
def string_both_ends(input_string):
	#start writing your code here
	if len(input_string)<2:
	    return -1 
	else:
	    return input_string[0:2]+input_string[-2:]

input_string="A"
print(string_both_ends(input_string))



#PF-Prac-11
def find_upper_and_lower(sentence):
    c=0
    d=0
    l=[]
    #start writing your code here
    for i in sentence:
        if i.isupper():
            c=c+1
        if i.islower():
            d=d+1
    l.append(c)
    l.append(d)
    return l

sentence="Hello world!"
print(find_upper_and_lower(sentence))


#PF-Prac-12
def generate_sentences(subjects,verbs,objects):
    r=verbs[::-1]
    sentence_list=[]
    for i in subjects:
        for j in r:
            for k in objects:
                sentence_list.append(i+" "+j+" "+k)
    return " \n".join(sentence_list) 

subjects=["I","You"]
verbs=["love", "play"]
objects=["Hockey","Football"]
print(generate_sentences(subjects,verbs,objects))



#PF-Tryout
def find_five_digit():
	#start writing your code here
	n2=0
	n3=0
	n4=0
	n5=0
	for i in range(9,-1,-1):
	    n2=int(i-2)
	    n3=int(n2-2)
	    n4=int(n3-2)
	    n5=int(n3)
	    if (n3+n4+n5==i and i+n2+n3+n4+n5==19):
	        break
	s=str(i)+str(n2)+str(n3)+str(n4)+str(n5)
	print(s)

find_five_digit()
