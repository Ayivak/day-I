#PF-Tryout
def diagonal_stars(number):
    for i in range(0,number):
        for j in range(i):
            print(".",end="") 
        print("*")
            
   #start writing your code here
number=5
diagonal_stars(number)


#PF-Prac-23
def divisible_by_sum(number):
    t=number
    s=0
    while(t>0):
        r=t%10 
        t=t//10
        s+=r 
    if (number%s==0):
        return True
    else:
        return False
number=66
print(divisible_by_sum(number))


#PF-Prac-24
def find_gcd(num1,num2):
    #start writing your code here
    if num2==0:
        return num1
    else:
        return find_gcd(num2,num1%num2)

num1=14
num2=35
print(find_gcd(num1,num2))







#PF-Prac-25
def list_of_count(word_list):
    #start writing your code here
    count_list=[]
    for i in word_list:
        count_list.append(len(i))
    return count_list

word_list=["COme","here"]
print(list_of_count(word_list))



#PF-Prac-26
def check_occurence(string):
    c=0
    d=0
    string=string.upper()
    #start writing your code here
    c=string.count("MAT")
    d=string.count("JET")
    if c==d:
        return True 
    else:
        return False
string="Jet on the Mat but mat is too long"
print(check_occurence(string))


#PF-Prac-27
def check_for_ten(num1,num2):
    d=num1+num2
    if num1==10 or num2==10 or d==10:
        return True
    return False
    #start writing your code here
    
print(check_for_ten(10,9))


#PF-Tryout
def sing_99_bottles():
   #start writing your code here
   for i in range(99,0,-1):
       print(i,end=" ")  
       print("bottles of beer on the wall,",end=" ")
       print(i,end=" ")
       print("bottles of beer.Take one down, pass it around,",end=" ")
       print(int(i-1),end=" ")
       print("bottles of beer on the wall.")
sing_99_bottles()




#PF-Prac-29
import itertools
def exchange_list(number_list):
    #start writing your code here
    t=number_list
    number_list=[]
    d=len(t)//2
    l=t[d:]
    l=l[::-1]
    g=t[:d]
    number_list.extend(l)
    number_list.extend(g)
    return number_list
     
     #import operator

a = [1,2]
b = ['a','b']
#c = list(reduce(operator.add,zip(a,b))) # slow.
# better.
number_list=[1,2,3,4,5,6]
print(exchange_list(number_list))


#PF-Prac-31
def sum_of_elements(num_list,number):
    a=len(num_list)
    r=0
    for i in range(1,a-1):
        if num_list[i-1]!=number and  num_list[i+1]!=number and  num_list[i]!=number:
            r+=num_list[i]
    if num_list[1]!=number and num_list[0]!=number:
        r+=num_list[0]
    if num_list[a-2]!=number and num_list[a-1]!=number:
        r+=num_list[a-1]
    return r
      
num_list=[1,2,1,2]
number=2
print(sum_of_elements(num_list, number))



#PF-Prac-37
def sum_of_list(num_list): 
    #Start writing your code here
	#Do not alter the below line
    return sum(num_list)
num_list=[44,23,77,11,89,3]
result=sum_of_list(num_list)
print("Sum of the elements:",result)

#PF-Prac-38
def build_index_grid(rows, columns):
    s=''
    r=[]
    for i in range(0,rows):
        for j in range(0,columns):
            if i==0 and j==0:
                s+="["
            if j==0:
                s+="["
            s+="'"+str(i)+","+str(j)+"'"
            if (j!=(columns-1)):
                s+=","
            if j==(columns-1) and i!=(rows-1):
                s+="]"
            if j==(columns-1) and i==(rows-1):
                s+="]]"
            
        r.append(s)
        s=""
            
    return r
rows=4
columns=3
result=build_index_grid(rows,columns)
print("Rows:",rows,"Columns:",columns)
print("The matrix is:",result)
for i in result:
    print(i)



